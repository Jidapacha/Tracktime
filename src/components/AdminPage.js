import React, { useEffect, useRef, useState } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import '@fortawesome/fontawesome-free/css/all.min.css';
import * as bootstrap from 'bootstrap';
import { supabase, supabaseAdmin } from '../supabaseClient';
import NavbarPage from './NavbarPage';
import '../cssfile/admin.css'

function AdminPage() {

    const [employees, setEmployees] = useState([]);
    const [editingEmployee, setEditingEmployee] = useState(null);
    const [searchQuery, setSearchQuery] = useState('');
    const [logError, setLogError] = useState(null);
    const [showCheckInQR, setShowCheckInQR] = useState(false);
    const [showCheckOutQR, setShowCheckOutQR] = useState(false);
    const [checkInQRUrl, setCheckInQRUrl] = useState('');
    const [checkOutQRUrl, setCheckOutQRUrl] = useState('');
    const [showSearch, setShowSearch] = useState(false);
    const [showAddForm, setShowAddForm] = useState(false);
    const [showOtherBank, setShowOtherBank] = useState(false);
    const [editFormData, setEditFormData] = useState({});
    const [employeeToDelete, setEmployeeToDelete] = useState(null);
    const [showAllEmployees, setShowAllEmployees] = useState(true);

    const toggleAddForm = () => {
        setShowAddForm(prev => {
          const next = !prev;
          if (next) {
            setSearchQuery('');
            setEditingEmployee(null);
            setShowSearch(false);  // ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
          }
          return next;
        });
      };
      
      const toggleSearchForm = () => {
        setShowSearch(prev => {
          const next = !prev;
          if (next) {
            setShowAddForm(false);
          } else {
            setSearchQuery('');
            setEditingEmployee(null);
          }
          return next;
        });
      };
      

    const handleBankChange = (e) => {
        setShowOtherBank(e.target.value === '‡∏≠‡∏∑‡πà‡∏ô‡πÜ');
    };

    const handleAddEmployee = async (e) => {
        e.preventDefault();
      
        const name = document.getElementById('name').value;
        const username = document.getElementById('username').value;
        const email = document.getElementById('email').value;
        const tel = document.getElementById('tel').value;
        const role = document.getElementById('role').value;
        const bank = document.getElementById('bank').value === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
            ? document.getElementById('other-bank').value
            : document.getElementById('bank').value;
        const bank_number = document.getElementById('bank_number').value;
      
        const password = Math.random().toString(36).slice(-8);
      
        // 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô employees table
        const { data, error } = await supabase.from('employees').insert([
            {
                name,
                username,
                email,
                tel,
                role,
                bank,
                bank_number,
                password,          
                special_role: null,  
            }
        ]);
      
        if (error) {
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message);
            console.error(error);
            return;
        }
      
        // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏ô Supabase Auth ‡∏î‡πâ‡∏ß‡∏¢ email ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        const { data: user, error: authError } = await supabaseAdmin.auth.admin.createUser({
            email: email,
            password: password,
            email_confirm: true
        });
      
        if (authError) {
            alert("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Auth ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: " + authError.message);
            console.error(authError);
        } else {
            alert("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üéâ");
            e.target.reset();
        }
    };

    

    useEffect(() => {
        async function fetchData() {
            const { data, error } = await supabase.from('employees').select('*');
            if (error) {
                setLogError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            } else {
                setEmployees(data);
            }
        }
        fetchData();
    }, []);

    const filteredEmployees = employees.filter(emp => {
      const searchQueryLower = searchQuery.toLowerCase();
      return (
        (emp.name && emp.name.toLowerCase().includes(searchQueryLower)) ||
        (emp.username && emp.username.toLowerCase().includes(searchQueryLower))
      );
    });

    
    const displayedEmployees = editingEmployee
    ? filteredEmployees.filter(emp => emp.employee_id === editingEmployee.employee_id)
    : searchQuery
      ? filteredEmployees
      : showAllEmployees
        ? filteredEmployees
        : filteredEmployees.slice(0, 5);



      
    const handleEditClick = (emp) => {
      setEditingEmployee(emp);
      setShowAllEmployees(false);
      setEditFormData({
        name: emp.name || '',
        username: emp.username || '',
        email: emp.email || '',
        tel: emp.tel || '',
        role: emp.role || '',
        bank: emp.bank || '',
        bank_number: emp.bank_number || '',
      });
    };
      
  

      useEffect(() => {
        if (editingEmployee) {
          setEditFormData({ ...editingEmployee });  // Clone object ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà reference ‡πÄ‡∏î‡∏¥‡∏°
        }
      }, [editingEmployee]);
      
      const fetchEmployees = async () => {
        const { data, error } = await supabase.from('employees').select('*');
        if (error) {
          setLogError('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
        } else {
          setEmployees(data);
        }
      };
      
      const handleEditEmployee = async (e) => {
        e.preventDefault();
      
        const updated = {};
      
        // ‚úÖ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        Object.entries(editFormData).forEach(([key, value]) => {
          if (value !== undefined && value !== editingEmployee[key]) {
            updated[key] = value;
          }
        });
      
        console.log('‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', editFormData, editingEmployee);
        console.log('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô:', updated);
      
        if (Object.keys(updated).length > 0) {
          const { error } = await supabase
            .from('employees')
            .update(updated)
            .eq('employee_id', editingEmployee.employee_id);
      
          if (error) {
            alert('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + error.message);
          } else {
            alert('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
            setEditingEmployee(null);
            setEditFormData({});
            await fetchEmployees(); // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô
          }
        } else {
          alert('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô');
        }
      };
      
      
    
    function toggleQRCode(type) {
        const today = new Date().toISOString().split("T")[0];
        const codeData = `qr-code-${type}-${today}`;
        const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${codeData}`;
      
        if (type === "check-in") {
          if (showCheckInQR) {
            setShowCheckInQR(false);  // ‡∏õ‡∏¥‡∏î QR ‡πÄ‡∏î‡∏¥‡∏°
          } else {
            setCheckInQRUrl(qrUrl);
            setShowCheckInQR(true);
            setShowCheckOutQR(false); // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          }
        } else if (type === "check-out") {
          if (showCheckOutQR) {
            setShowCheckOutQR(false);
          } else {
            setCheckOutQRUrl(qrUrl);
            setShowCheckOutQR(true);
            setShowCheckInQR(false); // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          }
        }
      };

      
    
      

    const showSection = (id) => {
        const sections = document.querySelectorAll('.section');
        sections.forEach(section => section.classList.remove('active'));
        const target = document.getElementById(id);
        if (target) target.classList.add('active');
    };

    return (
        <div>
            <NavbarPage showSection={showSection} />
            <div className="main-content">
                    <div id="admin" className="section">
                        <h2>üõ†Ô∏è ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</h2><hr />
                        <div className="mb-4">
                            <h4>üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</h4>
                            <button className="btn btn-outline-primary me-2 mb-2" onClick={toggleAddForm}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</button>
                            <button className="btn btn-outline-warning me-2 mb-2" onClick={toggleSearchForm}>‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</button>
                            
                            {showAddForm && (
                                <form id="add-employee-form" className="row g-2 mb-3" onSubmit={handleAddEmployee}>
                                    <div className="col-md-4">
                                        <input type="text" className="form-control" id="name" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á" required />
                                    </div>
                                    <div className="col-md-4">
                                        <input type="text" className="form-control" id="username" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô" required />
                                    </div>
                                    <div className="col-md-4">
                                        <input type="email" className="form-control" id="email" placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•" required />
                                    </div>
                                    <div className="col-md-4">
                                        <input type="text" className="form-control" id="tel" placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£" required />
                                    </div>
                                    <div className="col-md-4">
                                        <select id="role" className="form-select" required defaultValue="">
                                            <option value="" disabled>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</option>
                                            <option value="Full-time">Full-time</option>
                                            <option value="Part-time">Part-time</option>
                                            <option value="Internship">Internship</option>
                                        </select>
                                    </div>
                                    <div className="col-md-4">
                                        <select id="bank" className="form-select" required onChange={handleBankChange} defaultValue="">
                                            <option value="" disabled>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</option>
                                            <option value="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û">‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û</option>
                                            <option value="‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå">‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå</option>
                                            <option value="‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢">‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢</option>
                                            <option value="‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢">‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢</option>
                                            <option value="‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ">‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ</option>
                                            <option value="‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô">‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô</option>
                                            <option value="‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå">‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå</option>
                                            <option value="‡∏≠‡∏∑‡πà‡∏ô‡πÜ">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                                        </select>
                                    </div>
                                    {showOtherBank && (
                                        <div className="col-md-4" id="other-bank-container">
                                            <input type="text" className="form-control" id="other-bank" placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£" required />
                                        </div>
                                    )}
                                    <div className="col-md-4">
                                        <input type="text" className="form-control" id="bank_number" placeholder="‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" required />
                                    </div>
                                    <div className="col-md-4">
                                        <button type="submit" className="btn btn-success">‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                                    </div>
                                </form>
                            )}
                        
                        
                            {showSearch && (
                                <div className="mb-3">
                                    <input
                                        type="text"
                                        className="form-control"
                                        placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                                        value={searchQuery}
                                        onChange={(e) => setSearchQuery(e.target.value)}
                                    />
                                </div>
                            )}
                            {logError && <p className="text-danger">{logError}</p>}

                            {searchQuery && filteredEmployees.length > 0 && (
                                <ul className="list-group mb-3">
                                  {displayedEmployees.map(emp => (
                                    <li key={emp.employee_id} className="list-group-item d-flex justify-content-between align-items-center">
                                      <span>üë§ {emp.username} : {emp.name}</span>
                                      <div>
                                        <button className="btn btn-sm btn-warning me-2" onClick={() => handleEditClick(emp)}>‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                                        <button className="btn btn-sm btn-danger" onClick={() => setEmployeeToDelete(emp)}>üóëÔ∏è ‡∏•‡∏ö</button>
                                      </div>
                                    </li>
                                  ))}
                                </ul>

                            )}
                            {!showAllEmployees && (
                              <button className="btn btn-secondary" onClick={() => {
                                setShowAllEmployees(true);
                                setEditingEmployee(null);
                              }}>üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</button>
                            )}

                            {editingEmployee && (
                              <form className="row g-2 mt-3" onSubmit={handleEditEmployee}>
                                <div className="col-md-4">
                                  <input type="text" className="form-control" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á" value={editFormData.name} onChange={(e) => setEditFormData({ ...editFormData, name: e.target.value })} />
                                </div>
                                <div className="col-md-4">
                                  <input type="text" className="form-control" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô" value={editFormData.username} onChange={(e) => setEditFormData({ ...editFormData, username: e.target.value })} />
                                </div>
                                <div className="col-md-4">
                                  <input type="email" className="form-control" placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•" value={editFormData.email} onChange={(e) => setEditFormData({ ...editFormData, email: e.target.value })} />
                                </div>
                                <div className="col-md-4">
                                  <input type="text" className="form-control" placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£" value={editFormData.tel} onChange={(e) => setEditFormData({ ...editFormData, tel: e.target.value })} />
                                </div>
                                <div className="col-md-4">
                                  <select className="form-select" value={editFormData.role} onChange={(e) => setEditFormData({ ...editFormData, role: e.target.value })}>
                                    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</option>
                                    <option value="Full-time">Full-time</option>
                                    <option value="Part-time">Part-time</option>
                                    <option value="Internship">Internship</option>
                                  </select>
                                </div>
                                <div className="col-md-4">
                                  <input type="text" className="form-control" placeholder="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£" value={editFormData.bank} onChange={(e) => setEditFormData({ ...editFormData, bank: e.target.value })} />
                                </div>
                                <div className="col-md-4">
                                  <input type="text" className="form-control" placeholder="‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" value={editFormData.bank_number} onChange={(e) => setEditFormData({ ...editFormData, bank_number: e.target.value })} />
                                </div>
                                <div className="col-12 text-center mt-3">
                                  <button type="submit" className="btn btn-primary me-2">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                                  <button type="button" className="btn btn-secondary" onClick={() => {
                                    setEditingEmployee(null);
                                    setShowAllEmployees(true);
                                  }}>‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                                </div>

                              </form>
                            )}

                            
                            
                            {employeeToDelete && (
                                <div
                                    className="modal show fade d-block"
                                    tabIndex="-1"
                                    role="dialog"
                                    style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}
                                >
                                    <div className="modal-dialog modal-dialog-centered" role="document">
                                    <div className="modal-content">
                                        <div className="modal-header">
                                        <h5 className="modal-title">üóëÔ∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</h5>
                                        <button
                                            type="button"
                                            className="btn-close"
                                            aria-label="Close"
                                            onClick={() => setEmployeeToDelete(null)}
                                        ></button>
                                        </div>
                                        <div className="modal-body">
                                        <p>‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ?</p>
                                        <ul className="list-unstyled ps-3">
                                            <li><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á:</strong> {employeeToDelete.name}</li>
                                            <li><strong>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô:</strong> {employeeToDelete.username}</li>
                                            <li><strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</strong> {employeeToDelete.email}</li>
                                            <li><strong>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:</strong> {employeeToDelete.role}</li>
                                        </ul>
                                        </div>
                                        <div className="modal-footer">
                                        <button
                                            className="btn btn-danger"
                                            onClick={async () => {
                                            const { error } = await supabase
                                                .from('employees')
                                                .delete()
                                                .eq('employee_id', employeeToDelete.employee_id);
                                            if (error) {
                                                alert('‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + error.message);
                                            } else {
                                                alert('‚úÖ ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
                                                setEmployeeToDelete(null);
                                                fetchEmployees(); // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                                            }
                                            }}
                                        >
                                            ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
                                        </button>
                                        <button
                                            className="btn btn-secondary"
                                            onClick={() => setEmployeeToDelete(null)}
                                        >
                                            ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                        </button>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                                )}

                        </div>

                        <div className="mb-4">
                            <h4>üì¶ QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</h4>
                            <button className="btn btn-outline-success me-2 mb-2" onClick={() => toggleQRCode("check-in")}>
                                üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô
                            </button>
                            <button className="btn btn-outline-danger mb-2" onClick={() => toggleQRCode("check-out")}>
                                üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô
                            </button>

                            {showCheckInQR && (
                            <div className="mt-3">
                                <h5>QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô:</h5>
                                <img src={checkInQRUrl} alt="Check-in QR" />
                            </div>
                            )}

                            {showCheckOutQR && (
                            <div className="mt-3">
                                <h5>QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô:</h5>
                                <img src={checkOutQRUrl} alt="Check-out QR" />
                            </div>
                            )}

                        </div>
                    </div>
                </div>
            </div>
        
    )
}


export default AdminPage;