import React, { useState } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import NavbarPage from './NavbarPage';
import { supabase } from '../supabaseClient';

function LeavePage() {
  const [step, setStep] = useState('form');
  const [formData, setFormData] = useState({
    leaveType: 'sick',
    timeType: 'day',
    startDate: '',
    endDate: '',
    hourDate: '',
    startTime: '',
    endTime: '',
    remarks: '',
  });

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = () => {
    setStep('preview');
  };

  const handleConfirm = async () => {
    const { leaveType, timeType, startDate, endDate, hourDate, startTime, endTime, remarks } = formData;

    const { data: userData } = await supabase.auth.getUser();
    const email = userData?.user?.email;

    const { data: empData, error: empError } = await supabase
      .from('employees')
      .select('employee_id')
      .eq('email', email)
      .single();

    if (empError || !empData) {
      alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô');
      return;
    }

    const employeeId = empData.employee_id;

    const payload = {
      employee_id: employeeId,
      leave_type: leaveType,
      time_type: timeType,
      start_date: timeType === 'day' ? startDate : hourDate,
      end_date: timeType === 'day' ? endDate : hourDate,
      start_time: timeType === 'hour' ? startTime : null,
      end_time: timeType === 'hour' ? endTime : null,
      leave_remarks: remarks || null,
      status: 'pending',
    };

    const { error } = await supabase.from('leave_days').insert(payload);

    if (error) {
      alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠: ' + error.message);
    } else {
      alert('‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
      window.location.reload();
    }
  };

  const mapLeaveType = (value) => {
    switch (value) {
      case 'sick': return '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢';
      case 'personal': return '‡∏•‡∏≤‡∏Å‡∏¥‡∏à';
      case 'vacation': return '‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô';
      case 'other': return '‡∏≠‡∏∑‡πà‡∏ô‡πÜ';
      default: return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
    }
  };

  const showSection = (id) => {
    const sections = document.querySelectorAll('.section');
    sections.forEach(section => section.classList.remove('active'));
    const target = document.getElementById(id);
    if (target) target.classList.add('active');
  };

  return (
    <div>
      <NavbarPage showSection={showSection} />
      <div className="main-content">
        <div className="d-flex justify-content-center mt-4">
          <div className="p-4 shadow rounded" style={{ width: '100%', maxWidth: '500px', backgroundColor: '#f9f9f9' }}>

            {step === 'form' && (
              <>
                <h2 className="text-center mb-4">üìÑ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏≤</h2>

                <div className="mb-3">
                  <label>üìÑ ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</label>
                  <select name="leaveType" className="form-control" value={formData.leaveType} onChange={handleChange}>
                    <option value="sick">‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢</option>
                    <option value="personal">‡∏•‡∏≤‡∏Å‡∏¥‡∏à</option>
                    <option value="vacation">‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô</option>
                    <option value="other">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                  </select>
                </div>

                <div className="mb-3">
                  <label>‚è∞ ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤</label><br/>
                  <div>
                    <input type="radio" name="timeType" value="day" checked={formData.timeType === 'day'} onChange={handleChange} /> ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô
                    <input type="radio" name="timeType" value="hour" checked={formData.timeType === 'hour'} onChange={handleChange} className="ms-3" /> ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                  </div>
                </div>

                {formData.timeType === 'day' ? (
                  <>
                    <div className="mb-3">
                      <label>üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</label>
                      <input type="date" name="startDate" className="form-control" value={formData.startDate} onChange={handleChange} />
                    </div>
                    <div className="mb-3">
                      <label>üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
                      <input type="date" name="endDate" className="form-control" value={formData.endDate} onChange={handleChange} />
                    </div>
                  </>
                ) : (
                  <>
                    <div className="mb-3">
                      <label>üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</label>
                      <input type="date" name="hourDate" className="form-control" value={formData.hourDate} onChange={handleChange} />
                    </div>
                    <div className="mb-3">
                      <label>‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°</label>
                      <input type="time" name="startTime" className="form-control" value={formData.startTime} onChange={handleChange} />
                    </div>
                    <div className="mb-3">
                      <label>‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
                      <input type="time" name="endTime" className="form-control" value={formData.endTime} onChange={handleChange} />
                    </div>
                  </>
                )}

                <div className="mb-3">
                  <label>üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</label>
                  <textarea name="remarks" className="form-control" rows="3" value={formData.remarks} onChange={handleChange} placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏≤..."></textarea>
                </div>

                <button className="btn btn-success w-100" onClick={handleSubmit}>‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠</button>
              </>
            )}

            {step === 'preview' && (
              <>
                <h2 className="text-center mb-4">üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏•‡∏≤</h2>
                <div className="mb-3">
                  <strong>üìÑ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤:</strong> {mapLeaveType(formData.leaveType)}<br/>
                  <strong>‚è∞ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ß‡∏•‡∏≤:</strong> {formData.timeType === 'day' ? '‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô' : '‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á'}<br/>
                  {formData.timeType === 'day' ? (
                    <>
                      <strong>üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</strong> {formData.startDate}<br/>
                      <strong>üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:</strong> {formData.endDate}<br/>
                    </>
                  ) : (
                    <>
                      <strong>üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> {formData.hourDate}<br/>
                      <strong>‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤:</strong> {formData.startTime} - {formData.endTime}<br/>
                    </>
                  )}
                  {formData.remarks && (
                    <>
                      <strong>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {formData.remarks}<br/>
                    </>
                  )}
                </div>

                <div className="d-flex justify-content-between">
                  <button className="btn btn-primary" onClick={() => setStep('form')}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                  <button className="btn btn-success" onClick={handleConfirm}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠</button>
                </div>
              </>
            )}

          </div>
        </div>
      </div>
    </div>
  );
}

export default LeavePage;
